{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "The server",
  "steps": [
    {
      "file": "host/server/config.js",
      "description": "update local or production (same keys for both, default environment is local)\r\n\r\n`ssr`: if true, it will include global definitions of few props to be used in angular ssr, in addition to the right express engine used by angular universal. \r\n\r\n`urlBased`: if true, reads the language from the url /en/ or /tr/ ..etc and sets it to a cookie, before serving the files with that root. This value must match `gulpfiles/config.json:isUrlBased`",
      "line": 9,
      "title": "change server config",
      "contents": "var path = require(\"path\");\r\nvar rootPath = path.normalize(__dirname + '/../');\r\n\r\n// use this for different keys on server if any\r\n// ssr and urlbased used to switch between different flavors of cricketere server\r\n\r\nconst languages = ['en', 'ar', 'tr']; // populate languages supported, for ssr and urlbased\r\nmodule.exports = {\r\n    local: {\r\n        name: 'local',\r\n        rootPath: rootPath,\r\n        ssr: true,\r\n        urlBased: true,\r\n        languages\r\n    }\r\n    , production: {\r\n        name: 'production',\r\n        rootPath: rootPath,\r\n        ssr: true,\r\n        urlBased: true,\r\n        languages\r\n    },\r\n    getConfig: function () {\r\n        var env = process.env.NODE_ENV || 'local';\r\n\r\n\r\n        return this[env];\r\n    }\r\n};\r\n"
    },
    {
      "file": "host/server/config.js",
      "description": "Add sama languages to support as those defined in `gulpfiles/config.json` and make sure the src/locale/*.js has an entry for each language. (like klingon.js)",
      "line": 7,
      "title": "add server language",
      "contents": "var path = require(\"path\");\r\nvar rootPath = path.normalize(__dirname + '/../');\r\n\r\n// use this for different keys on server if any\r\n// ssr and urlbased used to switch between different flavors of cricketere server\r\n\r\nconst languages = ['en', 'ar', 'tr']; // populate languages supported, for ssr and urlbased\r\nmodule.exports = {\r\n    local: {\r\n        name: 'local',\r\n        rootPath: rootPath,\r\n        ssr: true,\r\n        urlBased: true,\r\n        languages\r\n    }\r\n    , production: {\r\n        name: 'production',\r\n        rootPath: rootPath,\r\n        ssr: true,\r\n        urlBased: true,\r\n        languages\r\n    },\r\n    getConfig: function () {\r\n        var env = process.env.NODE_ENV || 'local';\r\n\r\n\r\n        return this[env];\r\n    }\r\n};\r\n"
    },
    {
      "file": "host/server.js",
      "description": "The server file is a thin express server layer to serve angular client and ssr. No API service here.\r\n\r\nWhen `ssr` is set to true, the global context is defined with few extra props needed for angular universal to work. No DOM redefinition here, only override to void statements and values.\r\n\r\nIn `host` server, run npm task: `install` to install the necessary express server files to run the full ssr version.\r\n\r\n```\r\nnpm run install\r\n```\r\n\r\nThen inside the host folder run\r\n```\r\nnode server\r\n```\r\n\r\nBrowse to localhost:1212\r\n",
      "line": 8,
      "title": "The server",
      "contents": "var express = require('express');\r\nconst fs = require('fs');\r\n\r\n/*********************Configuration***********/\r\nvar config = require('./server/config').getConfig();\r\n\r\n// for ssr to run, define global\r\nif (config.ssr){\r\n    global.WebSocket = require('ws');\r\n    global.XMLHttpRequest = require('xhr2');\r\n\r\n    global.window = undefined;\r\n\r\n\r\n    // override localStorage on server side\r\n    global.localStorage = {\r\n        getItem: function (key) {\r\n            // return dummy object to override certain server side\r\n            return null;\r\n\r\n        },\r\n        setItem: function (key, value, expiresin) {\r\n            if (expiresin === void 0) { expiresin = 0; }\r\n        },\r\n        clear: function () {\r\n        },\r\n        removeItem: function (key) {\r\n        }\r\n    };\r\n    global._debug = function (o, message, type) {\r\n        if (type === 'e' || type === 'f' || type === 'ssr') {\r\n            console.log(message, o);\r\n\r\n        }\r\n    };\r\n    global._attn = function (o, message) {\r\n        // do nothing\r\n        // console.log(message, o);\r\n    }\r\n\r\n    // to make language change on ssr, use globals\r\n    // relying on cookie is coupling it with client side resources, unable to use reference of keys, always resources.keys, explicity\r\n    global.resources = {\r\n        language: 'en',\r\n        country: 'JO',\r\n        keys: { }\r\n    };\r\n\r\n    // get all languages here (keys)\r\n    global.resources.allLanguages = {}\r\n    for (let lang of config.languages) {\r\n        const resFile = './server/locale/' + lang + '.js';\r\n\r\n        if (fs.existsSync(resFile)) {\r\n            global.resources.allLanguages[lang] =  require(resFile).resources.keys;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n/******* EXPRESS *******/\r\nvar app = express();\r\n\r\nrequire('./server/express')(app);\r\n\r\nvar country = require('./server/country');\r\napp.use(country(config));\r\n\r\n// for language, even if single, always set to default\r\nvar language = require('./server/language');\r\napp.use(language(config));\r\n\r\n// for ssr use\r\napp.use(function(req, res, next){\r\n\r\n     // also save serverUrl to use with local interceptor\r\n     let proto = req.protocol;\r\n     let port = '';\r\n     if (req.headers) {\r\n         if (req.headers['x-forwarded-proto']) {\r\n             proto = req.headers['x-forwarded-proto'].toString();\r\n         }\r\n\r\n     }\r\n     res.locals.serverUrl = `${proto}://${req.get('host')}${port}`;\r\n     next();\r\n});\r\n\r\n// serve the right router\r\nconst _routes = (config.ssr ? '-ssr' : '') + (config.urlBased ? '-url' : '');\r\nrequire('./server/routes' + _routes)(app, config);\r\n// require('./server/routes')(app, config);\r\n// require('./server/routes-url')(app, config);\r\n// require('./server/routes-ssr')(app, config);\r\n// require('./server/routes-ssr-url')(app, config);\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function (req, res, next) {\r\n    var err = new Error('404');\r\n    err['statusCode'] = 404;\r\n\r\n    next();\r\n});\r\n\r\napp.use(function (err, req, res, next) {\r\n    res.status(err.status || 500);\r\n    console.log(err.stack);\r\n    err.internalMessage = err.message; // the server error to display in debug mode\r\n    res.send(err);\r\n});\r\n\r\n/*************** listening  ***************/\r\n\r\nvar port = process.env.PORT || 1212;\r\n\r\napp.listen(port, function (err) {\r\n    // console.log('started to listen to port: ' + port);\r\n    if (err) {\r\n        console.log(err);\r\n        return;\r\n    }\r\n});\r\n"
    },
    {
      "file": "host/server.js",
      "description": "Routing changes according to configs: `ssr` and `urlBased`... all route files are included, one is required by server.js\r\n\r\n`routes`: client side only (no ssr), no url base, changing language via cookie in your app, serves different index file, which is generated in postbuild gulp task, one index per language.\r\n\r\n`routes-ssr`: ssr, no url. Language changes via cookie, changes the resources served on server side, and the index.html file.\r\n\r\n`routes-url`: client-side only, language changes by url. Serves `/lang/index.lang.html` for each language supported.\r\n\r\n`routes-ssr-url`: ssr, and url based language switch. Serves `/lang/index.lang.html` on client and server side.\r\n\r\nAfter running the build process necssary, move into host folder, and run server.",
      "line": 94,
      "title": "Serve route",
      "contents": "var express = require('express');\r\nconst fs = require('fs');\r\n\r\n/*********************Configuration***********/\r\nvar config = require('./server/config').getConfig();\r\n\r\n// for ssr to run, define global\r\nif (config.ssr){\r\n    global.WebSocket = require('ws');\r\n    global.XMLHttpRequest = require('xhr2');\r\n\r\n    global.window = undefined;\r\n\r\n\r\n    // override localStorage on server side\r\n    global.localStorage = {\r\n        getItem: function (key) {\r\n            // return dummy object to override certain server side\r\n            return null;\r\n\r\n        },\r\n        setItem: function (key, value, expiresin) {\r\n            if (expiresin === void 0) { expiresin = 0; }\r\n        },\r\n        clear: function () {\r\n        },\r\n        removeItem: function (key) {\r\n        }\r\n    };\r\n    global._debug = function (o, message, type) {\r\n        if (type === 'e' || type === 'f' || type === 'ssr') {\r\n            console.log(message, o);\r\n\r\n        }\r\n    };\r\n    global._attn = function (o, message) {\r\n        // do nothing\r\n        // console.log(message, o);\r\n    }\r\n\r\n    // to make language change on ssr, use globals\r\n    // relying on cookie is coupling it with client side resources, unable to use reference of keys, always resources.keys, explicity\r\n    global.resources = {\r\n        language: 'en',\r\n        country: 'JO',\r\n        keys: { }\r\n    };\r\n\r\n    // get all languages here (keys)\r\n    global.resources.allLanguages = {}\r\n    for (let lang of config.languages) {\r\n        const resFile = './server/locale/' + lang + '.js';\r\n\r\n        if (fs.existsSync(resFile)) {\r\n            global.resources.allLanguages[lang] =  require(resFile).resources.keys;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n/******* EXPRESS *******/\r\nvar app = express();\r\n\r\nrequire('./server/express')(app);\r\n\r\nvar country = require('./server/country');\r\napp.use(country(config));\r\n\r\n// for language, even if single, always set to default\r\nvar language = require('./server/language');\r\napp.use(language(config));\r\n\r\n// for ssr use\r\napp.use(function(req, res, next){\r\n\r\n     // also save serverUrl to use with local interceptor\r\n     let proto = req.protocol;\r\n     let port = '';\r\n     if (req.headers) {\r\n         if (req.headers['x-forwarded-proto']) {\r\n             proto = req.headers['x-forwarded-proto'].toString();\r\n         }\r\n\r\n     }\r\n     res.locals.serverUrl = `${proto}://${req.get('host')}${port}`;\r\n     next();\r\n});\r\n\r\n// serve the right router\r\nconst _routes = (config.ssr ? '-ssr' : '') + (config.urlBased ? '-url' : '');\r\nrequire('./server/routes' + _routes)(app, config);\r\n// require('./server/routes')(app, config);\r\n// require('./server/routes-url')(app, config);\r\n// require('./server/routes-ssr')(app, config);\r\n// require('./server/routes-ssr-url')(app, config);\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function (req, res, next) {\r\n    var err = new Error('404');\r\n    err['statusCode'] = 404;\r\n\r\n    next();\r\n});\r\n\r\napp.use(function (err, req, res, next) {\r\n    res.status(err.status || 500);\r\n    console.log(err.stack);\r\n    err.internalMessage = err.message; // the server error to display in debug mode\r\n    res.send(err);\r\n});\r\n\r\n/*************** listening  ***************/\r\n\r\nvar port = process.env.PORT || 1212;\r\n\r\napp.listen(port, function (err) {\r\n    // console.log('started to listen to port: ' + port);\r\n    if (err) {\r\n        console.log(err);\r\n        return;\r\n    }\r\n});\r\n"
    },
    {
      "file": "host/server.js",
      "description": "Add on: get country from header (azure, or cloudflare, or iplocation). Remove if you do not wish to save country in cookie. ",
      "line": 69,
      "title": "Country middleware",
      "contents": "var express = require('express');\r\nconst fs = require('fs');\r\n\r\n/*********************Configuration***********/\r\nvar config = require('./server/config').getConfig();\r\n\r\n// for ssr to run, define global\r\nif (config.ssr){\r\n    global.WebSocket = require('ws');\r\n    global.XMLHttpRequest = require('xhr2');\r\n\r\n    global.window = undefined;\r\n\r\n\r\n    // override localStorage on server side\r\n    global.localStorage = {\r\n        getItem: function (key) {\r\n            // return dummy object to override certain server side\r\n            return null;\r\n\r\n        },\r\n        setItem: function (key, value, expiresin) {\r\n            if (expiresin === void 0) { expiresin = 0; }\r\n        },\r\n        clear: function () {\r\n        },\r\n        removeItem: function (key) {\r\n        }\r\n    };\r\n    global._debug = function (o, message, type) {\r\n        if (type === 'e' || type === 'f' || type === 'ssr') {\r\n            console.log(message, o);\r\n\r\n        }\r\n    };\r\n    global._attn = function (o, message) {\r\n        // do nothing\r\n        // console.log(message, o);\r\n    }\r\n\r\n    // to make language change on ssr, use globals\r\n    // relying on cookie is coupling it with client side resources, unable to use reference of keys, always resources.keys, explicity\r\n    global.resources = {\r\n        language: 'en',\r\n        country: 'JO',\r\n        keys: { }\r\n    };\r\n\r\n    // get all languages here (keys)\r\n    global.resources.allLanguages = {}\r\n    for (let lang of config.languages) {\r\n        const resFile = './server/locale/' + lang + '.js';\r\n\r\n        if (fs.existsSync(resFile)) {\r\n            global.resources.allLanguages[lang] =  require(resFile).resources.keys;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n/******* EXPRESS *******/\r\nvar app = express();\r\n\r\nrequire('./server/express')(app);\r\n\r\nvar country = require('./server/country');\r\napp.use(country(config));\r\n\r\n// for language, even if single, always set to default\r\nvar language = require('./server/language');\r\napp.use(language(config));\r\n\r\n// for ssr use\r\napp.use(function(req, res, next){\r\n\r\n     // also save serverUrl to use with local interceptor\r\n     let proto = req.protocol;\r\n     let port = '';\r\n     if (req.headers) {\r\n         if (req.headers['x-forwarded-proto']) {\r\n             proto = req.headers['x-forwarded-proto'].toString();\r\n         }\r\n\r\n     }\r\n     res.locals.serverUrl = `${proto}://${req.get('host')}${port}`;\r\n     next();\r\n});\r\n\r\n// serve the right router\r\nconst _routes = (config.ssr ? '-ssr' : '') + (config.urlBased ? '-url' : '');\r\nrequire('./server/routes' + _routes)(app, config);\r\n// require('./server/routes')(app, config);\r\n// require('./server/routes-url')(app, config);\r\n// require('./server/routes-ssr')(app, config);\r\n// require('./server/routes-ssr-url')(app, config);\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function (req, res, next) {\r\n    var err = new Error('404');\r\n    err['statusCode'] = 404;\r\n\r\n    next();\r\n});\r\n\r\napp.use(function (err, req, res, next) {\r\n    res.status(err.status || 500);\r\n    console.log(err.stack);\r\n    err.internalMessage = err.message; // the server error to display in debug mode\r\n    res.send(err);\r\n});\r\n\r\n/*************** listening  ***************/\r\n\r\nvar port = process.env.PORT || 1212;\r\n\r\napp.listen(port, function (err) {\r\n    // console.log('started to listen to port: ' + port);\r\n    if (err) {\r\n        console.log(err);\r\n        return;\r\n    }\r\n});\r\n"
    },
    {
      "file": "host/server/language.js",
      "description": "save language in cookie, either from a cookie set somewhere in your app, or if `urlBased` is set to true, from url itself.\r\n\r\nif `ssr` is set to true, the language keys are populated with the right language to be used in angular universal.",
      "line": 4,
      "title": "language middleware",
      "contents": "// to make language change on ssr, use globals\r\n\r\nmodule.exports = function (config) {\r\n    return function (req, res, next) {\r\n\r\n        // check cookies for language, for html request only\r\n        res.locals.lang = req.cookies.lang || 'en';\r\n\r\n        // TODO: exclude non html sources, for now exclude all resources with extension\r\n        if (req.path.indexOf('.') > 1) {\r\n            next();\r\n            return;\r\n        }\r\n\r\n        // if urlbased (also multilingual) derive language from url\r\n        if (config.urlBased) {\r\n            for (let lang of config.languages) {\r\n                if (req.path.indexOf('/' + lang) === 0) {\r\n                    res.locals.lang = lang; // force en from url\r\n                }\r\n            }\r\n        }\r\n\r\n        // in ssr populate resources with the language keys\r\n        if (config.ssr) {\r\n            global.resources.language = res.locals.lang;\r\n            global.resources.keys = global.resources.allLanguages[res.locals.lang];\r\n        }\r\n\r\n        // set cookie for a year\r\n        res.cookie('lang', res.locals.lang, { expires: new Date(Date.now() + 31622444360) });\r\n\r\n        next();\r\n\r\n    };\r\n}\r\n"
    },
    {
        "file": "src/app/core/local.interceptor.ts",
        "description": "Remove this line when no ssr is supported. And remove the if condition when request exist. Those are lines that make the localinterceptor work well on nodejs during ssr cycle. ",
        "line": 12,
        "title": "ssr in localinterceptor"
      }
  ],
  "ref": "master"
}
